// src/index.ts
import { ZodError, number, z } from "zod";
var OutputFileType = z.object({
  url: z.string(),
  filename: z.string()
});
var status = z.enum([
  "not-started",
  "running",
  "uploading",
  "success",
  "failed",
  "started",
  "queued",
  "timeout"
]);
var runOutputs = z.array(z.object({
  data: z.object({
    images: z.array(OutputFileType).optional(),
    files: z.array(OutputFileType).optional(),
    gifs: z.array(OutputFileType).optional()
  })
}));
var WebookRequestBody = z.object({
  status,
  run_id: z.string(),
  outputs: runOutputs
});
async function parseWebhookDataSafe(request, headers) {
  return parseDataSafe(WebookRequestBody, request, headers);
}
async function parseDataSafe(schema, request, headers) {
  let data = void 0;
  try {
    if (request.method === "GET") {
      const url = new URL(request.url);
      const params = Object.fromEntries(url.searchParams);
      data = await schema.parseAsync(params);
    } else {
      const json = await request.json();
      data = await schema.parseAsync(json);
    }
  } catch (e) {
    if (e instanceof ZodError) {
      const message = e.flatten().fieldErrors;
      return [
        void 0,
        Response.json(message, {
          status: 500,
          statusText: "Invalid request",
          headers
        })
      ];
    }
  }
  if (!data)
    return [
      void 0,
      Response.json(
        {
          message: "Invalid request"
        },
        { status: 500, statusText: "Invalid request", headers }
      )
    ];
  return [data, void 0];
}
var runTypes = z.object({
  run_id: z.string()
});
var runOutputTypes = z.object({
  id: z.string(),
  status,
  outputs: runOutputs,
  live_status: z.string().optional().nullable(),
  progress: number().default(0)
});
var uploadFileTypes = z.object({
  upload_url: z.string(),
  file_id: z.string(),
  download_url: z.string()
});
var getWebsocketTypes = z.object({
  ws_connection_url: z.string()
  // auth_token: z.string(),
  // get_workflow_endpoint_url: z.string(),
});
var ComfyDeployClient = class {
  constructor({ apiBase, apiToken }) {
    this.apiBase = "https://www.comfydeploy.com/api";
    if (apiBase) {
      this.apiBase = `${apiBase}/api`;
    }
    this.apiToken = apiToken;
  }
  async run({
    deployment_id,
    inputs,
    webhook
  }) {
    return fetch(`${this.apiBase}/run`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        authorization: `Bearer ${this.apiToken}`
      },
      body: JSON.stringify({
        deployment_id,
        inputs,
        webhook
      }),
      cache: "no-store"
    }).then((response) => {
      if (!response.ok) {
        throw new Error(response.statusText);
      }
      return response.json();
    }).then((json) => {
      const result = runTypes.parse(json);
      return {
        run_id: result.run_id
      };
    }).catch((err) => {
      console.error("err", err);
      return null;
    });
  }
  async getRun(run_id) {
    return await fetch(`${this.apiBase}/run?run_id=${run_id}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        authorization: `Bearer ${this.apiToken}`
      },
      cache: "no-store"
    }).then(async (response) => {
      const json = await response.json();
      return json;
    }).then((json) => runOutputTypes.parse(json)).catch((err) => {
      console.error(err);
      return null;
    });
  }
  async runSync(props) {
    const runResult = await this.run(props);
    if (!runResult || !runResult.run_id)
      return null;
    const timeout = 60 * 5;
    const interval = 1e3;
    let run = null;
    for (let i = 0; i < timeout; i++) {
      run = await this.getRun(runResult.run_id);
      if (run && run.status == "success") {
        break;
      }
      await new Promise((resolve) => setTimeout(resolve, interval));
    }
    if (!run) {
      return {
        id: runResult.run_id
      };
    }
    return run;
  }
  async getUploadUrl(type, file_size) {
    const obj = {
      type,
      file_size: file_size.toString()
    };
    const url = new URL(`${this.apiBase}/upload-url`);
    url.search = new URLSearchParams(obj).toString();
    return await fetch(url.href, {
      method: "GET",
      headers: {
        authorization: `Bearer ${this.apiToken}`
      },
      cache: "no-store"
    }).then((response) => response.json()).then((json) => uploadFileTypes.parse(json)).catch((err) => {
      console.error(err);
      return null;
    });
  }
  async getWebsocketUrl({ deployment_id }) {
    const url = new URL(`${this.apiBase}/websocket/${deployment_id}`);
    return await fetch(url.href, {
      method: "GET",
      headers: {
        authorization: `Bearer ${this.apiToken}`
      },
      cache: "no-store"
    }).then((response) => response.json()).then((json) => getWebsocketTypes.parse(json)).catch((err) => {
      console.error(err);
      return null;
    });
  }
};
export {
  ComfyDeployClient,
  OutputFileType,
  WebookRequestBody,
  parseWebhookDataSafe
};
