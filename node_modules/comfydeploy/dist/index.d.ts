import { z } from 'zod';

declare const OutputFileType: z.ZodObject<{
    url: z.ZodString;
    filename: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    filename: string;
}, {
    url: string;
    filename: string;
}>;
declare const WebookRequestBody: z.ZodObject<{
    status: z.ZodEnum<["not-started", "running", "uploading", "success", "failed", "started", "queued", "timeout"]>;
    run_id: z.ZodString;
    outputs: z.ZodArray<z.ZodObject<{
        data: z.ZodObject<{
            images: z.ZodOptional<z.ZodArray<z.ZodObject<{
                url: z.ZodString;
                filename: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                filename: string;
            }, {
                url: string;
                filename: string;
            }>, "many">>;
            files: z.ZodOptional<z.ZodArray<z.ZodObject<{
                url: z.ZodString;
                filename: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                filename: string;
            }, {
                url: string;
                filename: string;
            }>, "many">>;
            gifs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                url: z.ZodString;
                filename: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                filename: string;
            }, {
                url: string;
                filename: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                url: string;
                filename: string;
            }[] | undefined;
            files?: {
                url: string;
                filename: string;
            }[] | undefined;
            gifs?: {
                url: string;
                filename: string;
            }[] | undefined;
        }, {
            images?: {
                url: string;
                filename: string;
            }[] | undefined;
            files?: {
                url: string;
                filename: string;
            }[] | undefined;
            gifs?: {
                url: string;
                filename: string;
            }[] | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        data: {
            images?: {
                url: string;
                filename: string;
            }[] | undefined;
            files?: {
                url: string;
                filename: string;
            }[] | undefined;
            gifs?: {
                url: string;
                filename: string;
            }[] | undefined;
        };
    }, {
        data: {
            images?: {
                url: string;
                filename: string;
            }[] | undefined;
            files?: {
                url: string;
                filename: string;
            }[] | undefined;
            gifs?: {
                url: string;
                filename: string;
            }[] | undefined;
        };
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    status: "not-started" | "running" | "uploading" | "success" | "failed" | "started" | "queued" | "timeout";
    run_id: string;
    outputs: {
        data: {
            images?: {
                url: string;
                filename: string;
            }[] | undefined;
            files?: {
                url: string;
                filename: string;
            }[] | undefined;
            gifs?: {
                url: string;
                filename: string;
            }[] | undefined;
        };
    }[];
}, {
    status: "not-started" | "running" | "uploading" | "success" | "failed" | "started" | "queued" | "timeout";
    run_id: string;
    outputs: {
        data: {
            images?: {
                url: string;
                filename: string;
            }[] | undefined;
            files?: {
                url: string;
                filename: string;
            }[] | undefined;
            gifs?: {
                url: string;
                filename: string;
            }[] | undefined;
        };
    }[];
}>;
declare function parseWebhookDataSafe(request: Request, headers?: HeadersInit): Promise<[z.infer<typeof WebookRequestBody> | undefined, Response | undefined]>;
declare class ComfyDeployClient {
    apiBase: string;
    apiToken: string;
    constructor({ apiBase, apiToken }: {
        apiBase?: string;
        apiToken: string;
    });
    run({ deployment_id, inputs, webhook, }: {
        deployment_id: string;
        inputs?: Record<string, string>;
        webhook?: string;
    }): Promise<{
        run_id: string;
    } | null>;
    getRun(run_id: string): Promise<{
        status: "not-started" | "running" | "uploading" | "success" | "failed" | "started" | "queued" | "timeout";
        outputs: {
            data: {
                images?: {
                    url: string;
                    filename: string;
                }[] | undefined;
                files?: {
                    url: string;
                    filename: string;
                }[] | undefined;
                gifs?: {
                    url: string;
                    filename: string;
                }[] | undefined;
            };
        }[];
        id: string;
        progress: number;
        live_status?: string | null | undefined;
    } | null>;
    runSync(props: {
        deployment_id: string;
        inputs?: Record<string, string>;
        webhook?: string;
    }): Promise<{
        status: "not-started" | "running" | "uploading" | "success" | "failed" | "started" | "queued" | "timeout";
        outputs: {
            data: {
                images?: {
                    url: string;
                    filename: string;
                }[] | undefined;
                files?: {
                    url: string;
                    filename: string;
                }[] | undefined;
                gifs?: {
                    url: string;
                    filename: string;
                }[] | undefined;
            };
        }[];
        id: string;
        progress: number;
        live_status?: string | null | undefined;
    } | {
        id: string;
    } | null>;
    getUploadUrl(type: string, file_size: number): Promise<{
        upload_url: string;
        file_id: string;
        download_url: string;
    } | null>;
    getWebsocketUrl({ deployment_id }: {
        deployment_id: string;
    }): Promise<{
        ws_connection_url: string;
    } | null>;
}

export { ComfyDeployClient, OutputFileType, WebookRequestBody, parseWebhookDataSafe };
